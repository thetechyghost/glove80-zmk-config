/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        thold: thold {
            compatible = "zmk,behavior-hold-tap";
            label = "THOLD";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <10>;
            flavor = "balanced";
            hold-trigger-key-positions = <10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 57 58 59 60 61 62 63 74 75 76 77 78 79 69 52>;
            bindings = <&mo>, <&kp>;
        };

        homeLeft: homeLeft {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMELEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <0>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79 0 1 2 3 4 10 11 12 13 14 15 16 22 23 24 25 26 27 28 34 35 36 37 38 39 40 46 47 48 49 50 51 58 64 65 66 67 68>;
            retro-tap;
        };

        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC";
            bindings = <&mo>, <&rgb_ug_status_macro>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        homeRight: homeRight {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMERIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <0>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 5 6 7 8 9 15 16 17 18 19 20 21 27 28 29 30 31 32 33 39 40 41 42 43 44 45 51 58 59 60 61 62 63 75 76 77 78 79 46 47 64 65 66 67 68>;
            retro-tap;
        };

        longHold: longHold {
            compatible = "zmk,behavior-hold-tap";
            label = "LONGHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79>;
            flavor = "tap-preferred";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1          &kp F2    &kp F3                    &kp F4                         &kp F5                                                                                                                                            &kp F6                    &kp F7                  &kp F8                      &kp F9    &kp F10
&kp EQUAL       &kp N1    &kp N2                    &longHold LS(LG(N3)) NUMBER_3  &longHold LS(LG(N4)) NUMBER_4  &kp N5                                                                                                     &kp N6  &kp N7                    &kp N8                  &kp N9                      &kp N0    &kp MINUS
&kp GRAVE       &kp Q     &kp W                     &kp E                          &kp R                          &kp T                                                                                                      &kp Y   &kp U                     &kp I                   &kp O                       &kp P     &kp BSLH
&kp MINUS       &kp A     &homeLeft LEFT_CONTROL S  &homeLeft LEFT_GUI D           &homeLeft LEFT_SHIFT F         &kp G                                                                                                      &kp H   &homeRight RIGHT_SHIFT J  &homeRight RIGHT_GUI K  &homeRight RIGHT_CONTROL L  &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z     &kp X                     &kp C                          &kp V                          &kp B   &kp ESCAPE  &kp LEFT_ALT  &magic 1 0        &kp LGUI           &thold 4 RIGHT_ALT  &thold 3 TAB    &kp N   &kp M                     &kp COMMA               &kp DOT                     &kp FSLH  &kp RSHIFT
&kp LEFT_ALT    &kp HOME  &kp END                   &kp LEFT                       &kp RIGHT                              &kp BSPC    &kp LEFT_GUI  &kp LEFT_CONTROL  &kp RIGHT_CONTROL  &kp RET             &thold 2 SPACE          &kp UP                    &kp DOWN                &kp LBKT                    &kp RBKT  &kp RIGHT_ALT
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        Navigation {
            bindings = <
&none           &none                   &none          &none     &none                                                                                            &none                 &none                  &none       &none             &none
&none           &none                   &none          &none     &none          &none                                                             &none           &kp DOLLAR            &kp AMPERSAND          &kp CARET   &none             &none
&none           &kp LS(LG(LEFT_ARROW))  &kp LA(LEFT)   &kp UP    &kp LA(RIGHT)  &kp LS(LG(RIGHT))                                                 &kp MINUS       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS    &kp SINGLE_QUOTE  &none
&none           &kp HOME                &kp LEFT       &kp DOWN  &kp RIGHT      &kp END                                                           &kp UNDERSCORE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EQUAL   &kp COLON         &none
&kp LEFT_SHIFT  &none                   &kp PAGE_DOWN  &none     &kp PAGE_UP    &none              &none       &none  &none  &none  &none  &none  &none           &kp LESS_THAN         &kp GREATER_THAN       &kp PERIOD  &kp QUESTION      &kp RIGHT_SHIFT
&none           &none                   &none          &none     &none                             &kp DELETE  &none  &none  &none  &none  &none                  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none       &none             &none
            >;
        };

        AppSwitch {
            bindings = <
&trans  &trans                  &trans                  &trans                  &trans                                                                                                                                       &trans                  &trans                     &trans                   &trans                    &trans
&trans  &kp LS(LA(LG(LC(N1))))  &kp LS(LA(LC(LG(N2))))  &kp LS(LA(LC(LG(N3))))  &kp LG(LA(LC(LS(N4))))  &kp LG(LC(LA(LS(N5))))                                                                       &kp LG(LC(LA(LS(N6))))  &kp LG(LC(LA(LS(N7))))  &kp LG(LA(LC(LS(N8))))     &kp LC(LG(LA(LS(N9))))   &kp LG(LC(LA(LS(N0))))    &trans
&trans  &kp LS(LA(LC(LG(Q))))   &kp LS(LA(LC(LG(W))))   &kp LS(LA(LC(LG(E))))   &kp LS(LA(LC(LG(R))))   &kp LS(LA(LC(LG(T))))                                                                        &kp LG(LC(LA(LS(Y))))   &kp LC(LA(LG(LS(U))))   &kp LG(LC(LA(LS(I))))      &kp LG(LC(LA(LS(O))))    &kp LG(LC(LA(LS(P))))     &trans
&trans  &kp LS(LA(LC(LG(A))))   &kp LS(LG(LA(LC(S))))   &kp LS(LA(LC(LG(D))))   &kp LA(LC(LG(LS(F))))   &kp LS(LA(LC(LG(G))))                                                                        &kp LG(LC(LA(LS(H))))   &kp LG(LA(LC(LS(J))))   &kp LG(LC(LA(LS(K))))      &kp LG(LC(LA(LS(L))))    &kp LS(LA(LC(LG(SEMI))))  &trans
&trans  &kp LS(LA(LC(LG(Z))))   &kp LS(LA(LC(LG(X))))   &kp LS(LC(LG(LA(C))))   &kp LA(LS(LG(LC(V))))   &kp LG(LC(LA(LS(B))))   &trans      &trans  &trans  &trans  &trans                   &trans  &kp LS(LG(LC(LA(N))))   &kp LG(LC(LA(LS(M))))   &kp LG(LC(LA(LS(COMMA))))  &kp LG(LA(LS(LC(DOT))))  &kp LS(LA(LC(LG(FSLH))))  &trans
&trans  &trans                  &trans                  &trans                  &trans                                          &kp DELETE  &trans  &trans  &trans  &kp LS(LA(LC(LG(RET))))  &trans                          &trans                  &trans                     &trans                   &trans                    &trans
            >;
        };

        Programming {
            bindings = <
&none  &none               &none               &none               &none                                                                                                                                    &none               &none                  &none                &none                 &none
&none  &kp LA(LC(LG(N1)))  &kp LA(LC(LG(N2)))  &kp LA(LC(LG(N3)))  &kp LA(LC(LG(N4)))  &kp LA(LC(LG(N5)))                                                                               &kp LA(LC(LG(N6)))  &kp LA(LC(LG(N7)))  &kp LA(LC(LG(N8)))     &kp LA(LC(LG(N9)))   &kp LG(LC(LA(N0)))    &none
&none  &kp LA(LG(LC(Q)))   &kp LA(LC(LG(W)))   &kp LA(LC(LG(E)))   &kp LG(LC(LA(R)))   &kp LA(LC(LG(T)))                                                                                &kp LG(LC(LA(Y)))   &kp LG(LC(LA(U)))   &kp LG(LC(LA(I)))      &kp LG(LA(LC(O)))    &kp LG(LA(LC(P)))     &none
&none  &kp LA(LC(LG(A)))   &kp LA(LG(LC(S)))   &kp LG(LC(LA(D)))   &kp LG(LC(LA(F)))   &kp LG(LC(LA(G)))                                                                                &kp LA(LG(LC(H)))   &kp LA(LC(LG(J)))   &kp LA(LG(LC(K)))      &kp LA(LC(LG(L)))    &kp LA(LC(LG(SEMI)))  &none
&none  &kp LA(LC(LG(Z)))   &kp LA(LG(LC(X)))   &kp LG(LC(C))       &kp LG(LC(LA(V)))   &kp LG(LA(LC(B)))   &kp LA(LC(LG(ESCAPE)))  &none  &none  &none  &none                &none      &kp LA(LG(LC(N)))   &kp LA(LC(LG(M)))   &kp LA(LC(LG(COMMA)))  &kp LA(LG(LC(DOT)))  &kp LA(LC(LG(FSLH)))  &none
&none  &none               &none               &none               &none                                   &kp BSPC                &none  &none  &none  &kp LA(LC(LG(RET)))  &kp SPACE                      &none               &none                  &none                &none                 &none
            >;
        };

        Numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
